CHIP CPU {

    IN  inM[16], instruction[16], reset;           
    OUT outM[16], writeM, addressM[15], pc[15];          

    PARTS:

	Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);

	Not(in=instruction[15], out=not-instruction15);

	Or(a=not-instruction15, b=instruction[5], out=loadA);

	ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);

	// el D register

 	And(a=instruction[15], b=instruction[4], out=loadD);

	DRegister(in=outALU, load=loadD, out=outD);

	// ALU

	Mux16(a=outA, b=inM, sel=instruction[12], out=A-or-M);

	ALU(x=outD, y=A-or-M, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zrALU, ng=ngALU);

 	// contador

	Or(a=ngALU, b=zrALU, out=ng-or-zrALU);

	Not(in=ng-or-zrALU, out=posALU);

	And(a=instruction[0], b=posALU, out=jump0);

	And(a=instruction[1], b=zrALU, out=jump1);

	And(a=instruction[2], b=ngALU, out=jump2);

	Or(a=jump0, b=jump1, out=jump01);

	Or(a=jump01, b=jump2, out=jump012);

	And(a=jump012, b=instruction[15], out=jump);

	PC(in=outA, load=jump, inc=true, reset=reset, out[0..14]=pc);

	And(a=instruction[15], b=instruction[3], out=writeM);
}